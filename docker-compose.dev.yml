services:
  client:
    build:
      context: .
      dockerfile: ./apps/client/Dockerfile.development
    env_file: .env
    volumes:
      - ./apps/client:/app/apps/client
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    networks:
      - app_network
    depends_on:
      - server

  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile.development
    env_file: .env
    volumes:
      - ./apps/server:/app/apps/server
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      - app_network
    depends_on:
      - hardhat
      - rabbitmq
      - database

  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - ${MINIO_PORT}:${MINIO_PORT}
      - ${MINIO_UI_PORT}:${MINIO_UI_PORT}
    networks:
      - app_network
    environment:
      MINIO_ROOT_USER: MINIO_ROOT_USER
      MINIO_ROOT_PASSWORD: MINIO_ROOT_PASSWORD
    volumes:
      - minio-storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  artifacts-syncronizer:
    build:
      context: .
      dockerfile: ./apps/artifacts-syncronizer/Dockerfile.development
    env_file: .env
    ports:
      - 4001:4001
    volumes:
      - ./apps/artifacts-syncronizer:/app/apps/artifacts-syncronizer
    networks:
      - app_network
    depends_on:
      - hardhat
      - rabbitmq

  hardhat:
    build:
      context: .
      dockerfile: ./packages/contracts/Dockerfile
    env_file: .env
    ports:
      - ${HARDHAT_PORT}:${HARDHAT_PORT}
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    env_file: .env
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
      - ${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}
    networks:
      - app_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 120s
      retries: 3

  database:
    image: postgres:15.2
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_DB=${DATABASE}
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network

volumes:
  pgdata:
  minio-storage:

networks:
  app_network:
    driver: bridge
